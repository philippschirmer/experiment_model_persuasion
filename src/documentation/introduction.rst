.. _introduction:


************
Introduction
************

You can find the documentation on the rationale, pytask, and more background at https://econ-project-templates.readthedocs.io/en/stable/.

The Python version of the template uses a modified version of Stachurski's and Sargent's code accompanying their Online Course :cite:`StachurskiSargent13` for Schelling's (1969, :cite:`Schelling69`) segregation model as the running example.


.. _getting_started:

Getting started
===============


 Stuff so far

1. Documentation structure:
   1. Introduction - 
      1. Project description
         1. Theory and Experiment
         2. Software Engineering Perspective.
   2. Structure of the experiment
      1. How to interact with the project
   3. Software Engineering we implemented (methods we used) (need better title for this)
   4. Open Questions, Challenges
   5. Conclusion (brief.)

Total pages: Five?



1. Project Description

For this final project in Effective Programming Practices for Economists, we implement a novel experimental design that aims to provide a better understanding of persuasive communication in a setting of financial graph analysis.

Using the Python package oTree (CITE), we develop a proof of concept for testing to what extend "non-informative" communication might still have an effect

Literature contribution. The experiment contributes to several strands of literature. First, it seeks to expand the evidence on persuasion in economic contexts. (Might cite Kamenica, DellaVigna?, think about) by providing experimental insights. Second, it contributes to the field of behavioral finance, seeking to obtain a better understanding at what behavioral biases and influences might shape financial decision-making in particular. Here, our experiment promises to shed light to what extend a neglect of the model prior might make "cheap talk" nevertheless persuasive. 

In this "proof of concept" version of the experiment, two players interact with each other in a dynamic sender-receiver game. In the first stage of the game, a sender observes financial stock price data generated by some imperfectly known data generating process. Specifically, sender and receiver know that the data is generated by a random walk with drift, where the sign of the shift can change up to once during the observed process. For example, a stock price observed for $T=80$ periods might follow a random walk with shock variance XXX and a positive drift parameter XXX for the first XXX periods, before switching to a negative drift with XXX for the remaining periods. 

Receivers take the role of financial investors, deciding whether to invest or not into the stock. Hence, after seeing the stock data, they can make a simple choice between buying the stock or selling it, effectively betting on whether the stock price increases in the future or decreases. Persuaders take the role of financial advisors, seeking to guide the receivers decision-making. They can be aligned, meaning that they benefit from receiver's chosen actions if and only if the receiver benefits, or biased, in which case they benefit whenever the receiver decides to buy the stock (regardless of the future stock development).

While the receiver's choice is a simple binary investment choice, persuaders can send from a relatively large set of messages that corresponds to different "models" of the true data generating process. To do so, they can make a graphical argument for the switching point of the time trend in the observed data. After observing the data, they can 



**This assumes you have completed the steps in the `Getting Started section of the documentation <https://econ-project-templates.readthedocs.io/en/stable/getting_started.html>`_ and **everything worked.**

The logic of the project template works by step of the analysis:

1. Data management
2. The actual estimations / simulations / ?
3. Visualisation and results formatting (e.g. exporting of LaTeX tables)
4. Research paper and presentations.

It can be useful to have code and model parameters available to more than one of these steps, in that case see sections :ref:`model_specifications`, :ref:`model_code`, and :ref:`library`.

First of all, think about whether this structure fits your needs -- if it does not, you need to adjust (delete/add/rename) directories and files in the following locations:

    * Directories in **src/**;
    * The documentation source files in **src/documentation/** (Note: These should follow the directories in **src** exactly);
    * The list of included documentation source files in **src/documentation/index.rst**

Later adjustments should be painlessly possible, so things won't be set in stone.

Once you have done that, move your source data to **src/original_data/** and start filling up the actual steps of the project workflow (data management, analysis, final steps, paper). All you should need to worry about is to specify the tasks for `pytask`.
